pipeline {
    agent any
    stages {
        
        stage('Build') {
            steps {
                notifyBuild('STARTED')
                sh "cp /home/jenkins/build/build.xml ${WORKSPACE}"
                sh "cp /home/jenkins/build/.eslintrc.js ${WORKSPACE}"
                sh "cp -R /home/jenkins/build ${WORKSPACE}"
                sh "npm install --save-dev eslint eslint-plugin-vue"
                sh "git diff origin/${BRANCH_NAME} HEAD --name-only --output='build/filelist.txt'"
                sh 'phing build-diff'
                
            }
        }

        
        stage('Deploy STG') {
        when {
            branch 'staging'
        }
        
        steps {
            sshagent(['68e7e182-e7f3-4165-8c5a-d00d4690aedd']) {
            sh 'ssh -o StrictHostKeyChecking=no zigexn@192.168.1.168 -- "cd projects/training && git pull"'
            }
        }

        }
    }
    
    post {
        success {
            notifyBuild()
        }
        failure {
            notifyBuild('FAILED')
        }
        always {
            recordIssues aggregatingResults: true, enabledForFailure: true, qualityGates: [[threshold: 1, type: 'TOTAL_ERROR', unstable: false]], tools: [phpCodeSniffer(pattern: '**/build/logs/checkstyle.xml')]
            recordIssues aggregatingResults: true, enabledForFailure: true, qualityGates: [[threshold: 1, type: 'TOTAL_ERROR', unstable: false]], tools: [pmdParser(pattern: '**/build/logs/pmd.xml')]
            recordIssues aggregatingResults: true, enabledForFailure: true, qualityGates: [[threshold: 1, type: 'TOTAL_ERROR', unstable: false]], tools: [junitParser(pattern: '**/build/logs/junit.xml'), php(), esLint(pattern: '**/build/logs/eslint.xml')]
        }
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)

}
